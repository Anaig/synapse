{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f3414c2e-c479-484b-b19e-1787de6e0140/resourceGroups/rg-synapse/providers/Microsoft.Synapse/workspaces/asmicworkspace/bigDataPools/Spark1",
				"name": "Spark1",
				"type": "Spark",
				"endpoint": "https://asmicworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://users@asmiclake.dfs.core.windows.net/taxidata/taxidata2018.csv', \\\r\n",
					"    format='csv', \\\r\n",
					"    header=True,\r\n",
					"    inferSchema=True)\r\n",
					"display(df.limit(10))"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"df.printSchema()"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Apply some feature transformation"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"import numpy\r\n",
					"import pandas\r\n",
					"\r\n",
					"# Transform to a Pandas dataframe\r\n",
					"pd_df = df.toPandas()\r\n",
					"\r\n",
					"def get_pickup_time(df):\r\n",
					"    pickupHour = df['pickupHour'];\r\n",
					"    if ((pickupHour >= 7) & (pickupHour <= 10)):\r\n",
					"        return 'AMRush'\r\n",
					"    elif ((pickupHour >= 11) & (pickupHour <= 15)):\r\n",
					"        return 'Afternoon'\r\n",
					"    elif ((pickupHour >= 16) & (pickupHour <= 19)):\r\n",
					"        return 'PMRush'\r\n",
					"    else:\r\n",
					"        return 'Night'\r\n",
					"\r\n",
					"featurized_df = pandas.DataFrame()\r\n",
					"featurized_df['tipped'] = (pd_df['tip_amount'] > 0).astype('int')\r\n",
					"featurized_df['fareAmount'] = pd_df['fare_amount'].astype('float32')\r\n",
					"featurized_df['paymentType'] = pd_df['payment_type'].astype('int')\r\n",
					"featurized_df['passengerCount'] = pd_df['passenger_count'].astype('int')\r\n",
					"featurized_df['tripDistance'] = pd_df['trip_distance'].astype('float32')\r\n",
					"featurized_df['pickupHour'] = pd_df['tpep_pickup_datetime'].dt.hour.astype('int')\r\n",
					"featurized_df['tripTimeSecs'] = ((pd_df['tpep_dropoff_datetime'] - pd_df['tpep_pickup_datetime']) / numpy.timedelta64(1, 's')).astype('int')\r\n",
					"\r\n",
					"featurized_df['pickupTimeBin'] = featurized_df.apply(get_pickup_time, axis=1)\r\n",
					"featurized_df = featurized_df.drop(columns='pickupHour')\r\n",
					"\r\n",
					"display(featurized_df.head(5))"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"filtered_df = featurized_df[(featurized_df.tipped >= 0) & (featurized_df.tipped <= 1)\\\r\n",
					"    & (featurized_df.fareAmount >= 1) & (featurized_df.fareAmount <= 250)\\\r\n",
					"    & (featurized_df.paymentType >= 1) & (featurized_df.paymentType <= 2)\\\r\n",
					"    & (featurized_df.passengerCount > 0) & (featurized_df.passengerCount < 8)\\\r\n",
					"    & (featurized_df.tripDistance >= 0) & (featurized_df.tripDistance <= 100)\\\r\n",
					"    & (featurized_df.tripTimeSecs >= 30) & (featurized_df.tripTimeSecs <= 7200)]\r\n",
					"\r\n",
					"filtered_df.info()"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"spark_df = spark.createDataFrame(filtered_df)\r\n",
					"spark_df.write.mode(\"overwrite\").saveAsTable(\"transformedTaxiData\")"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}